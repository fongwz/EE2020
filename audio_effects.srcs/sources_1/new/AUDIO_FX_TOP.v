`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: 
// Matric No.:
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
    
    //music instrument
    input TOGGLE_PIANO,    // switch to toggle instrument
    
    //reset,record,playback buttons
    input btn1,btn2,btn3,btn4,btn5,
    
    //SSDisplay switch
    input TOGGLE_SSDISP,
    
    //playback
    //input playbackswitch, //toggles playback
    input fasterhello,    //says hello faster
    
    //Keyboard
    input PS2Data,
    input PS2Clk,
    
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
    
    //LED segment
    output [15:0] led,
    output [6:0] seg,
    output [3:0] an, 
    
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4    // PmodDA2 serial clock, 50MHz clock
    
    //keyboard tx output
    //output tx
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
      wire clk_20k;
      wire clk_50M;
      
      //instrument frequencies
      reg [31:0] instrument_frequency_a_1760 = 1760;
      reg [31:0] instrument_frequency_b_1975 = 1975;
      reg [31:0] instrument_frequency_c_1047 = 1047;
      reg [31:0] instrument_frequency_d_1175 = 1175;
      reg [31:0] instrument_frequency_e_1319 = 1319;
      reg [31:0] instrument_frequency_f_1397 = 1397;
      reg [31:0] instrument_frequency_g_1568 = 1568;
      reg [31:0] instrument_frequency_asharp_1865 = 1865;
      reg [31:0] instrument_frequency_csharp_1109 = 1109;
      reg [31:0] instrument_frequency_dsharp_1245 = 1245;
      reg [31:0] instrument_frequency_fsharp_1480 = 1480;
      reg [31:0] instrument_frequency_gsharp_1661 = 1661;
      
      //module frequencies
      reg [31:0] mic_frequency_ssdisp_3 = 3;
      reg [31:0] ssdisp_refresh_frequency_700 = 700;      
      reg [31:0] button_frequency_16 = 16;
      reg [31:0] led_frequency_20 = 20;
      reg [31:0] delay_frequency_1000 = 1000;
      
      wire clk_1760; //A
      wire clk_1975; //B
      wire clk_1047; //C
      wire clk_1175; //D
      wire clk_1319; //E
      wire clk_1397; //F
      wire clk_1568; //G
      wire clk_1865; //A#
      wire clk_1109; //C#
      wire clk_1245; //D#
      wire clk_1480; //F#
      wire clk_1661; //G#
      
      wire clk_3; //clk for ssdisp mic_in delay
      wire clk_16; //clk for dff button
      wire clk_20; //clk for LED
      wire clk_700; //clk for 4 anode ssdisp
      
      //button pulses and etc
      //wire pulseA;
      //wire pulseB;
      wire pulseC;
      wire pulseD;
      wire pulseE;
      wire pulseF;
      wire pulseG;
      
      //standard clk
      CLK_20K clk20k(CLK, clk_20k);
      CLK_50M clk50m(CLK, clk_50M);  
      
      //init A,B,C,D,E,F,G,A#,C#,D#,F#,G#
      FLEXIBLE_CLK_DIVIDER clk1760(CLK, instrument_frequency_a_1760, clk_1760); //A
      FLEXIBLE_CLK_DIVIDER clk1975(CLK, instrument_frequency_b_1975, clk_1975); //B
      FLEXIBLE_CLK_DIVIDER clk1047(CLK, instrument_frequency_c_1047, clk_1047); //C
      FLEXIBLE_CLK_DIVIDER clk1175(CLK, instrument_frequency_d_1175, clk_1175); //D
      FLEXIBLE_CLK_DIVIDER clk1319(CLK, instrument_frequency_e_1319, clk_1319); //E
      FLEXIBLE_CLK_DIVIDER clk1397(CLK, instrument_frequency_f_1397, clk_1397); //F
      FLEXIBLE_CLK_DIVIDER clk1568(CLK, instrument_frequency_g_1568, clk_1568); //G
      
      FLEXIBLE_CLK_DIVIDER clk1865(CLK, instrument_frequency_asharp_1865, clk_1865); //A#
      FLEXIBLE_CLK_DIVIDER clk1109(CLK, instrument_frequency_csharp_1109, clk_1109); //C#
      FLEXIBLE_CLK_DIVIDER clk1245(CLK, instrument_frequency_dsharp_1245, clk_1245); //D#
      FLEXIBLE_CLK_DIVIDER clk1480(CLK, instrument_frequency_fsharp_1480, clk_1480); //F#
      FLEXIBLE_CLK_DIVIDER clk1661(CLK, instrument_frequency_gsharp_1661, clk_1661); //G#
      
      //init 3hz and 700hz for SSDisp mic
      FLEXIBLE_CLK_DIVIDER clk3(CLK, mic_frequency_ssdisp_3, clk_3);
      FLEXIBLE_CLK_DIVIDER clk700(CLK, ssdisp_refresh_frequency_700, clk_700);
      
      //init 16hz for SSDisp piano
      FLEXIBLE_CLK_DIVIDER clk16(CLK, button_frequency_16, clk_16);
      
      //init 20hz for led
      FLEXIBLE_CLK_DIVIDER clk20(CLK, led_frequency, clk_20);
            
      //init button pulse
      //SINGLE_PULSE_DFF btnA(clk_16, btn2, pulseA);
      //SINGLE_PULSE_DFF btnB(clk_16, btn1, pulseB);
      SINGLE_PULSE_DFF btnC(clk_16, btn1, pulseC);
      SINGLE_PULSE_DFF btnD(clk_16, btn2, pulseD);
      SINGLE_PULSE_DFF btnE(clk_16, btn3, pulseE);
      SINGLE_PULSE_DFF btnF(clk_16, btn4, pulseF);
      SINGLE_PULSE_DFF btnG(clk_16, btn5, pulseG);
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
       wire [11:0]MIC_in;
       SPI u1 (CLK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
       
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
      wire [11:0] speaker_out;
      wire [11:0] delay_out; //delay sound from mic for delay loop
      wire [11:0] playback_out;
      reg [11:0] delay_mic; //delay sound from mic for SSDisp
      
      
      always @ (posedge clk_3) begin
        delay_mic <= MIC_in;
      end
      
      //wire clk_delay_1000ms;
      //wire clk_delay_750ms;
      //wire clk_delay_500ms;
      //wire clk_delay_250ms;
      //FLEXIBLE_CLK_DIVIDER cd1000(CLK, 5000, clk_delay_1000ms);
      //
      //init delay with 1 second
      //DELAY_INPUT delay250MS(cdl, MIC_in, delay_out);
      ///////////////////////////
      
      
      //playback
      reg [12:0] startMem = 0;
      dist_mem_gen_0 hello (startMem, playback_out);
      always @ (posedge clk_20k) begin
        //if(playbackswitch == 1) begin
            startMem = startMem + 1 + fasterhello;
            if(startMem == 8192)
                startMem = 0;
        //end
      end      
      
      
      
      ////////////////////////////////////////////////////////////////////////////////////////////////////////
      ///Seven segment display module
      SSegDisp display(delay_mic, clk_700, pulseC, pulseD, pulseE, pulseF, pulseG, TOGGLE_SSDISP, seg, an);
      ////////////////////////////////////////////////////////////////////////////////////////////////////////
      
      ////////////////////////////////////////////////////////////////////////////////////////////////////////
      ///Keyboard module
      wire [15:0] keyout;
      wire [11:0] keyboard_note_out;
      USB_KEYBOARD keyboard(CLK, PS2Data, PS2Clk, keyout);
      KEYBOARD_MAP map(
        keyout[7:0], keyout[15:12], 
        clk_1760, clk_1975, clk_1047, clk_1175, clk_1319, clk_1397, clk_1568, //A,B,C,D,E,F,G
        clk_1865, clk_1109, clk_1245, clk_1480, clk_1661, //A#,C#,D#,F#,G#
        playback_out, //playback
        //delay_out,  //delay
        final_out
      );
      assign led = keyout[15:0]; //checker, uncomment when not needed
      ////////////////////////////////////////////////////////////////////////////////////////////////////////
      
      
      //volume_indicator volume_led(clk_700, MIC_in, led);
      assign speaker_out = (TOGGLE_PIANO)? final_out : delay_out;
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
        
  //////////////////////////////////////////////////////////////////////////////////

endmodule
